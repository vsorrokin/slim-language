'fileTypes': [
  'slim'
  'vue'
]
'name': 'Slim'
'patterns': [
  {
    'comment': 'Doctype declaration.'
    'match': '^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?'
    'name': 'comment.other.doctype.jade'
  }
  {
    'begin': '^(\\s*)//-'
    'comment': 'Unbuffered (jade-only) comments.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'comment.unbuffered.block.jade'
  }
  {
    'begin': '^(\\s*)//'
    'comment': 'Buffered (html) comments.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'string.comment.buffered.block.jade'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'invalid.illegal.comment.comment.block.jade'
        'comment': 'Buffered comments inside buffered comments will generate invalid html.'
        'match': '^\\s*(//)(?!-)'
        'name': 'string.comment.buffered.block.jade'
      }
    ]
  }
  {
    'begin': '^(\\s*)(script)((\\.$)|(?=[.#(].*\\.$))'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.script.jade'
    'comment': 'Script tag with JavaScript code.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.script.jade'
    'patterns': [
      {
        'begin': '\\G(?=\\()'
        'end': '$'
        'name': 'stuff.tag.script.jade'
        'patterns': [
          {
            'include': '#tag_attributes'
          }
        ]
      }
      {
        'begin': '\\G(?=[.#])'
        'end': '$'
        'name': 'stuff.tag.script.jade'
        'patterns': [
          {
            'include': '#complete_tag'
          }
        ]
      }
      {
        'include': 'source.js'
      }
    ]
  }
  {
    'begin': '^(\\s*)(style)((\\.$)|(?=[.#(].*\\.$))'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.style.jade'
    'comment': 'Style tag with CSS code.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.style.jade'
    'patterns': [
      {
        'begin': '\\G(?=\\()'
        'end': '$'
        'name': 'stuff.tag.style.jade'
        'patterns': [
          {
            'include': '#tag_attributes'
          }
        ]
      }
      {
        'begin': '\\G(?=[.#])'
        'end': '$'
        'name': 'stuff.tag.style.jade'
        'patterns': [
          {
            'include': '#complete_tag'
          }
        ]
      }
      {
        'include': 'source.css'
      }
    ]
  }
  {
    'begin': '^(\\s*):(markdown)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.markdown.filter.jade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.markdown.filter.jade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'text.html.markdown'
      }
    ]
  }
  {
    'begin': '^(\\s*):(sass)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.sass.filter.jade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.sass.filter.jade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.sass'
      }
    ]
  }
  {
    'begin': '^(\\s*):(less)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.less.filter.jade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.less.filter.jade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.less'
      }
    ]
  }
  {
    'begin': '^(\\s*):(stylus)(?=\\(|$)$'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.stylus.filter.jade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.stylus.filter.jade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.stylus'
      }
    ]
  }
  {
    'begin': '^(\\s*):(coffee(-?script)?)(?=\\(|$)'
    'beginCaptures':
      '2':
        'name': 'constant.language.name.coffeescript.filter.jade'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'source.coffeescript.filter.jade'
    'patterns': [
      {
        'include': '#filter_args'
      }
      {
        'include': 'source.coffee'
      }
    ]
  }
  {
    'begin': '^(\\s*)((:(?=.))|(:$))'
    'beginCaptures':
      '4':
        'name': 'invalid.illegal.empty.generic.filter.jade'
    'comment': 'Generic Jade filter.'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.generic.filter.jade'
    'patterns': [
      {
        'begin': '\\G(?<=:)(?=.)'
        'end': '$'
        'name': 'name.generic.filter.jade'
        'patterns': [
          {
            'match': '\\G\\('
            'name': 'invalid.illegal.name.generic.filter.jade'
          }
          {
            'match': '\\w'
            'name': 'constant.language.name.generic.filter.jade'
          }
          {
            'include': '#filter_args'
          }
          {
            'match': '\\W'
            'name': 'invalid.illegal.name.generic.filter.jade'
          }
        ]
      }
    ]
  }
  {
    'begin': '^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\\'\\"]*(?:(?:\\\'(?:[^\\\']|(?:(?<!\\\\)\\\\\\\'))*\\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\\'\\"]*(?:(?:\\\'(?:[^\\\']|(?:(?<!\\\\)\\\\\\\'))*\\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))'
    'beginCaptures':
      '2':
        'name': 'constant.id.tag.jade'
      '3':
        'name': 'constant.language.js'
      '4':
        'name': 'entity.name.tag.jade'
    'comment': 'Generated from dot_block_tag.py'
    'end': '^(?!(\\1\\s)|\\s*$)'
    'name': 'text.block.dot.tag.jade'
    'patterns': [
      {
        'include': '#tag_attributes'
      }
      {
        'include': '#complete_tag'
      }
      {
        'begin': '^(?=.)'
        'end': '$'
        'name': 'text.block.jade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*+(?=[^/])'
    'comment': 'All constructs that generally span a single line starting with any number of white-spaces.'
    'end': '$'
    'name': 'tag.jade'
    'patterns': [
      {
        'include': '#inline_jade'
      }
      {
        'include': '#blocks_and_includes'
      }
      {
        'include': '#unbuffered_code'
      }
      {
        'include': '#mixins'
      }
      {
        'include': '#flow_control'
      }
      {
        'include': '#case_conds'
      }
      {
        'begin': '\\|'
        'comment': 'Tag pipe text line.'
        'end': '$'
        'name': 'text.block.pipe.jade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
      {
        'include': '#printed_expression'
      }
      {
        'begin': '\\G((?=<)|[^\\w.#]|(\\.[^\\w-]))|(#[^\\{\\w-])'
        'comment': 'Line starting with characters incompatible with tag name/id/class is standalone text.'
        'end': '$'
        'name': 'text.jade'
        'patterns': [
          {
            'include': '#inline_jade'
          }
          {
            'include': '#embedded_html'
          }
          {
            'include': '#html_entity'
          }
          {
            'include': '#interpolated_value'
          }
          {
            'include': '#interpolated_error'
          }
        ]
      }
      {
        'include': '#complete_tag'
      }
    ]
  }
]
'repository':
  'brackets-content-1':
    'begin': '\\['
    'end': '\\]'
    'patterns': [
      {
        'include': '#brackets-content-1'
      }
      {
        'include': 'source.ruby.rails'
      }
    ]
  'brackets-content-2':
    'begin': '\\{'
    'end': '\\}'
    'patterns': [
      {
        'include': '#brackets-content-2'
      }
      {
        'include': 'source.ruby.rails'
      }
    ]
  'brackets-content-3':
    'begin': '\\('
    'end': '\\)'
    'patterns': [
      {
        'include': '#brackets-content-3'
      }
      {
        'include': 'source.ruby.rails'
      }
    ]
  'embedded-engine-coffee':
    'begin': '^(\\s*)(coffee:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.coffee'
      }
    ]
  'embedded-engine-css':
    'begin': '^(\\s*)(css:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.css'
      }
    ]
  'embedded-engine-javascript':
    'begin': '^(\\s*)(javascript:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.js'
      }
    ]
  'embedded-engine-sass':
    'begin': '^(\\s*)(sass:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.sass'
      }
    ]
  'embedded-engine-scss':
    'begin': '^(\\s*)(scss:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.scss'
      }
    ]
  'embedded-engine-stylus':
    'begin': '^(\\s*)(styl:)\\s.*$'
    'beginCaptures':
      '2':
        'name': 'entity.name.tag.slim'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'patterns': [
      {
        'include': 'source.stylus'
      }
    ]
  'illegal':
    'match': '^\\s*+[^\\w=.#|\'-].*$'
    'name': 'invalid.illegal'
  'ruby-content':
    'begin': '==?\'? '
    'end': '(?<=do\\n)|(?<!\\\\|,)\\n'
    'name': 'source.ruby.rails.embedded.slim'
    'patterns': [
      {
        'include': 'source.ruby.rails'
      }
    ]
  'ruby-embedded':
    'begin': '(?<!\\\\)#{'
    'end': '}'
    'name': 'source.ruby.rails.embedded.slim'
    'patterns': [
      {
        'include': 'source.ruby.rails'
      }
    ]
  'ruby-logic':
    'begin': '^\\s*(?=-)'
    'end': '(?<=do\\n)|(?<!\\\\)\\n'
    'name': 'source.ruby.rails.embedded.slim'
    'patterns': [
      {
        'include': 'source.ruby.rails'
      }
    ]
  'slim-block-comment':
    'begin': '^(\\s*)(/)\\s.*$'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'name': 'comment.block.slim'
  'slim-escaped-content':
    'begin': '^(\\s*)[|\'][ \t]'
    'end': '^(?!(\\1(\t|  ))|\\s*$)'
    'name': 'text.slim.escaped-content'
    'patterns': [
      {
        'include': '#ruby-embedded'
      }
      {
        'include': 'text.html.basic'
      }
    ]
  'slim-line-comment':
    'match': '^\\s*/.*$'
    'name': 'comment.line.slash.slim'
  'tag-enclosed-1':
    'begin': '(([A-Za-z.#][\\w.#-]*\\w)++|\\w)\\['
    'beginCaptures':
      '1':
        'name': 'entity.name.tag.slim'
    'end': '\\]'
    'name': 'tag-enclosed-1'
    'patterns': [
      {
        'include': '#tag-params'
      }
      {
        'include': '#ruby-content'
      }
    ]
  'tag-enclosed-2':
    'begin': '(([A-Za-z.#][\\w.#-]*\\w)++|\\w)\\{'
    'beginCaptures':
      '1':
        'name': 'entity.name.tag.slim'
    'end': '\\}'
    'patterns': [
      {
        'include': '#tag-params'
      }
      {
        'include': '#ruby-content'
      }
    ]
  'tag-enclosed-3':
    'begin': '(([A-Za-z.#][\\w.#-]*\\w)++|\\w)\\('
    'beginCaptures':
      '1':
        'name': 'entity.name.tag.slim'
    'end': '\\)'
    'patterns': [
      {
        'include': '#tag-params'
      }
      {
        'include': '#ruby-content'
      }
    ]
  'tag-param-name':
    'match': '(?<=[\\s\\[\\{\\(])\\w[\\w:-]*(?==)'
    'name': 'entity.other.attribute-name.slim'
  'tag-param-value':
    'begin': '(?<=\\w)=(?!\\s)'
    'end': '\\s|(?=[\\]\\}\\)]|:\\s)'
    'name': 'source.ruby.rails.embedded.slim'
    'patterns': [
      {
        'include': '#brackets-content-1'
      }
      {
        'include': '#brackets-content-2'
      }
      {
        'include': '#brackets-content-3'
      }
      {
        'include': 'source.ruby.rails'
      }
    ]
  'tag-params':
    'patterns': [
      {
        'include': '#tag-param-name'
      }
      {
        'include': '#tag-param-value'
      }
    ]
  'tag-unenclosed':
    'begin': '(?:^\\s*|(?!^):\\s*)((?:([A-Za-z.#][\\w.#-]*\\w)++|[A-Za-z]))(?![\\[\\{\\(])'
    'beginCaptures':
      '1':
        'name': 'entity.name.tag.slim'
    'end': '$'
    'patterns': [
      {
        'include': '#tag-params'
      }
      {
        'include': '#inline-tags'
      }
      {
        'include': '#ruby-content'
      }
      {
        'include': '#ruby-embedded'
      }
      {
        'include': '#tag-unenclosed'
      }
      {
        'include': '#tag-enclosed-1'
      }
      {
        'include': '#tag-enclosed-2'
      }
      {
        'include': '#tag-enclosed-3'
      }
      {
        'include': 'text.html.basic'
      }
    ]
'scopeName': 'text.slim'
